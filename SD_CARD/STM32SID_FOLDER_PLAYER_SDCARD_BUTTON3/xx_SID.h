#ifndef _sid
#define _sid
uint8_t period = 4;//                        period for timer1, for frequency and resolution of PWM in uS
//                                           Automatic config set this as 4, if calculated multiplier is greater then 12 (uS), otherwise, is same as multiplier.
//                                           value of 1 represent number of cpu cycles in 1 uS. (cpu_speed * period) is PWM resolution .

uint8_t multiplier  ;//
//                                           (byte) Interrupt speed in uS (in general, how much slower then real SID). Automatic config will search for value that has SID emulator run under 13mS per frame.
//                                           needed for Timer2 (it also affect calculations in frequency multiplications per irq- it may affect tunes that uses Test-bit).
//                                           Ideally, this should be 1 (to cycle-exact emulate SID), but irq will need to respond and exit in next 500nS
//                                           Not with Bluepill, but for 2$ board, i'll make what i can
//                                           Minimum is 1 (as a number, if set manualy , wiiiiiiil beeeeeee sloooooooooooooow) (but it is fun to see how bluepill cycle emulate SID :-) )
//                                           Maximum is 248 , but that will greatly lower quality of high frequency sounds (Pulse voices might not even work, noise will be on lower frequencies, etc...)
//                                           You could say that SAMPLE_RATE=1000000/multiplier
//                                           Sound is not buffered, volume is calculated every <multiplier> uS
//



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const uint8_t magic_number = F_CPU / 1000000 ; // PWM resolution - number of cycles in 1 uS (PWM resolution = period * magic_number) // keep as same as speed of microcontroller, in Mhz
// at 72MHz there is 72 clock "ticks" in 1uS that drives counter of Timer1. It works with 128MHZ bluepill overclocked. It also works underclocked at 48MHz.
// STM32duino boards have this as CYCLES_PER_MICROSECOND
// STM32 boards have this as (F_CPU / 1000000)
// TODO: It's a 8bit number, so maximum clock is 255. TODO: See if it brake stuff if it's 16bit number.


volatile bool USE_CHANNEL_1    = true;
volatile bool USE_CHANNEL_2    = true;
volatile bool USE_CHANNEL_3    = true;

uint32_t SID_data_size = 0;

uint8_t  CIA_DC04 = 0;
uint8_t  CIA_DC05 = 0;

uint16_t MagicID = 0;
uint16_t VERSION = 0;
bool RAM_OVERFLOW = 0;

bool PLAYABLE_SID = false;
bool autoconfigFinished = false;
bool JAMMED = false;

uint32_t IRQ_TYPE_PER_TUNE = 0; // subtune speed info
uint32_t VIDEO_TYPE = 0; // pal or ntsc
uint32_t MODEL_TYPE = 0; //MOS6581 or MOS8580
uint32_t FLAGS76 = 0;
uint8_t ComputeMUSplayer = 0;
uint8_t C64Compatible = 0;
uint8_t LOW_RAM_uncompatible = 0;
uint16_t LOAD_ADDRESS = 0;
uint32_t SUBTUNE_SPEED = 0;

uint32_t SID_speed = 0;//20000; // value set in 2_setup.ino(in uS)

uint16_t SID_load_start = 0; //SID_data[0x7c] + (SID_data[0x7d] * 256); // get start address from .sid file
uint16_t SID_load_end = 0; //SID_start + SID_data_size - 0x7e ; // end address of music routine , not included "busy blocks", aka, ram needed after end of actual sid file.

uint16_t SID_play = 0;//SID_data[13] + (SID_data[12] * 256); // sid play address
uint16_t SID_init = 0;//SID_data[11] + (SID_data[10] * 256); // sid init address

uint8_t SID_default_tune = 0;//SID_data[17] + (SID_data[16] * 256); // default song to be played first
uint8_t SID_number_of_tunes = 0;//SID_data[15] + (SID_data[14] * 256); // number of tunes in sid
uint8_t SID_current_tune = 0;//SID_default_tune;



uint32_t tune_play_counter; // uS counter
uint32_t tune_end_counter = 1000000 * TUNE_PLAY_TIME; // play new tune every x seconds  (this is the number in uS) (maximum 32bit number is around 71minutes)

uint32_t VIC_irq = 0;
volatile  uint8_t  VIC_irq_request = 0;
volatile bool play_next_tune = 0;
volatile  uint8_t JSR1003 = 0;
volatile  uint8_t STAD4XX = 0;

uint8_t skip_counter;
uint8_t skip_counter_max = 197; //every 197th jumps into irq will be skiped, to emulate 985000Hz clock (not 1MHz )

int32_t w0 = 0;
//w0 = static_cast<sound_sample>(2*pi*f0[fc]*1.048576); // f0[fc] 0-12500 ; fc 0-7ff
// w0 = 2*pi*1.048576*(fc*12500/2047)
int32_t w0_max_dt = (2 * 3.1415926535897932385 * FILTER_FREQUENCY * 1.048576); // maximum frequency that can be filtered
int32_t w0_constant_part = 2.0 * 3.1415926535897932385 * 1.048576 * FILTER_FREQUENCY   / 2048.0; // around 40.211 per 1 value of FilterHiLo for 12500 max value // TODO : make this const array of 2048 values, as uint32_t, with FILTER_FREQUENCY as array members
int32_t w0_ceil_dt = 0.0;
int32_t w0_delta_t = 0.0;

int32_t w0_ceil_1 = 0.0;
int32_t Q_1024_div = 0;

int delta_t = 0;
int delta_t_flt = 0;

int32_t Vhp = 0;
int32_t Vbp = 0;
int32_t Vlp = 0;

int32_t dVbp = 0;
int32_t  dVlp = 0;
int32_t  dVhp = 0;

int32_t Volume_unfiltered = 0;
int32_t Volume_filtered = 0;
int32_t Volume_filter_input = 0;
int32_t Volume_filter_output = 0;

uint32_t i , j , k , l ; // i run out of names for temporary variables

uint8_t SID[] = {                  //  array that hold values of SID registers
  0,      // Freq_1_Lo                      - REG_0
  0,      // Freq_1_HI                      - REG_1
  0,      // PW1_Lo                         - REG_2
  0,      // PW1_Hi                         - REG_3
  0,      // ControlRegister_1              - REG_4
  // bit 0 - Gate_bit_1
  // bit 1 - Sync_bit_1
  // bit 2 - Ring_bit_1
  // bit 3 - Test_bit_1
  // bit 4 - triangle_bit_voice_1
  // bit 5 - sawtooth_bit_voice_1
  // bit 6 - pulse_bit_voice_1
  // bit 7 - noise_bit_voice_1
  0,     // Attack-Decay_1                  - REG_5
  // bit 0 - 3  // Decay_1  // 0-15
  // bit 4 - 7  // Attack_1  // 0-15
  0,      // Sustain-Release_1              - REG_6
  // bit 0 - 3  // Release_1 // 0-15
  // bit 4 - 7  // Sustain_1 // 0-15
  0,      // Freq_2_Lo                      - REG_7
  0,      // Freq_2_HI                      - REG_8
  0,      // PW2_Lo                         - REG_9
  0,      // PW2_Hi                         - REG_10
  0,      // ControlRegister_2              - REG_11
  // bit 0 - Gate_bit_2
  // bit 1 - Sync_bit_2
  // bit 2 - Ring_bit_2
  // bit 3 - Test_bit_2
  // bit 4 - triangle_bit_voice_2
  // bit 5 - sawtooth_bit_voice_2
  // bit 6 - pulse_bit_voice_2
  // bit 7 - noise_bit_voice_2
  0,     // Attack-Decay_2                  - REG_12
  // bit 0 - 3  // Decay_2 // 0-15
  // bit 4 - 7  // Attack_2  // 0-15
  0,      // Sustain-Release_2              - REG_13
  // bit 0 - 3  // Release_2 // 0-15
  // bit 4 - 7  // Sustain_2 // 0-15
  0,      // Freq_3_Lo                      - REG_14
  0,      // Freq_3_HI                      - REG_15
  0,      // PW3_Lo                         - REG_16
  0,      // PW3_Hi                         - REG_17
  0,      // ControlRegister_3              - REG_18
  // bit 0 - Gate_bit_3
  // bit 1 - Sync_bit_3
  // bit 2 - Ring_bit_3
  // bit 3 - Test_bit_3
  // bit 4 - triangle_bit_voice_3
  // bit 5 - sawtooth_bit_voice_3
  // bit 6 - pulse_bit_voice_3
  // bit 7 - noise_bit_voice_3
  0,     // Attack-Decay_3                  - REG_19
  // bit 0 - 3  // Decay_3  // 0-15
  // bit 4 - 7  // Attack_3  // 0-15
  0,      // Sustain-Release_3              - REG_20
  // bit 0 - 3  // Release_3 // 0-15
  // bit 4 - 7  // Sustain_3 // 0-15
  0,    // FILTER_Lo (0-7)                  - REG_21
  // bit 0 - 2
  0,    // FILTER_Hi ( 0 - 255 )            - REG_22
  0,     // RES_FILT                        - REG_23
  // bit 0    FILTER_Enable_1
  // bit 1    FILTER_Enable_2
  // bit 2    FILTER_Enable_3
  // bit 3    FILTER_Enable_EXT
  // bit 4 - 7  // Resonance  // 0-15
  0,    // FILTER_MODE-MASTER_VOLUME        - REG_24
  // bit 0 - 3  // MASTER_VOLUME  // 0-15
  // bit 4    FILTER_LP
  // bit 5    FILTER_BP
  // bit 6    FILTER_HP
  // bit 7    OFF3
  0,    // POTX                             - REG_25
  0,    // POTY                             - REG_26
  0,    // OSC3                             - REG_27
  0     // ENV3                             - REG_27

};



// BlueSID



uint8_t MASTER_VOLUME = 15; // $D418 //


uint16_t FILTER_HiLo = 0; // 11bit
uint8_t FILTER_Resonance = 0; // 4bit
uint8_t FILTER_Enable_1 = 0; // on/off
uint8_t FILTER_Enable_2 = 0; // on/off
uint8_t FILTER_Enable_3 = 0; // on/off
uint8_t FILTER_Enable_switch = 0; // Filter_Enable_123 in one variable
uint8_t FILTER_LP = 0; // on/off
uint8_t FILTER_HP = 0; // on/off
uint8_t FILTER_BP = 0; // on/off
uint8_t FILTER_Enable_EXT = 0; // on/off


uint8_t OSC3 = 0; // Register 27 - Oscilator output

uint8_t OFF3 = 0; //Register 24, bit 7 . Disable voice 3 output
uint8_t ENV3 = 0; // $D428
uint8_t POTX = 0; // TODO
uint8_t POTY = 0; // TODO



uint8_t SYNC_bit_voice_1 = 0;
uint8_t SYNC_bit_voice_2 = 0;
uint8_t SYNC_bit_voice_3 = 0;

uint8_t  test_bit_voice_1 = 0;
uint8_t  test_bit_voice_2 = 0;
uint8_t  test_bit_voice_3 = 0;

uint8_t ring_bit_voice_1 = 0;
uint8_t ring_bit_voice_2 = 0;
uint8_t ring_bit_voice_3 = 0;


uint16_t main_volume = 0;
uint32_t main_volume_32bit = 0;

/////////////////////////////// signed variables

int32_t Volume = 0;


int32_t Volume_1 = 0;
int32_t Volume_2 = 0;
int32_t Volume_3 = 0;


////////////////////////////////////////


// main OSCilator variables
uint32_t OSC_1 = 0; // main 24bit  accumulator oscilator - voice 1
uint32_t OSC_2 = 0; // main 24bit  accumulator oscilator - voice 2
uint32_t OSC_3 = 0; // main 24bit  accumulator oscilator - voice 3


uint32_t OSC_1_HiLo = 0x0000; // 0
uint32_t OSC_2_HiLo = 0x0000; // 0
uint32_t OSC_3_HiLo = 0x0000; // 0



// constants
const uint32_t max_OSC = 16777216;   // B0001 0000 0000 0000 0000 0000 0000
const uint32_t OSC_MSB = 2048;       // B0000 0000 0000 0000 1000 0000 0000
const uint16_t B4095 = 4095;         // B0000 0000 0000 0000 1111 1111 1111
const uint16_t B4096 = 4096;         // B0000 0000 0000 0001 0000 0000 0000
const uint16_t B2047 = 2047;         // B0000 0000 0000 0000 0111 1111 1111


uint8_t OSC_MSB_1; // Oscilator's MSB
uint8_t OSC_MSB_2;
uint8_t OSC_MSB_3;

uint8_t OSC_MSB_Previous_1 = 0;
uint8_t OSC_MSB_Previous_2 = 0;
uint8_t OSC_MSB_Previous_3 = 0;

uint8_t MSB_Rising_1 = 0;
uint8_t MSB_Rising_2 = 0;
uint8_t MSB_Rising_3 = 0;

uint32_t OSC_bit19_1 = 0;
uint32_t OSC_bit19_2 = 0;
uint32_t OSC_bit19_3 = 0;

uint32_t OSC_noise_1 = 0;
uint32_t OSC_noise_2 = 0;
uint32_t OSC_noise_3 = 0;

uint8_t OSC_bit19_Previous_1 = 0;
uint8_t OSC_bit19_Previous_2 = 0;
uint8_t OSC_bit19_Previous_3 = 0;

uint32_t temp11; // upper 12 bits of OSC_1

uint32_t temp12;

uint32_t temp13;

// internal SID registers

// ADSR

// values for attack and decay/release

const uint32_t  ADSR_LFSR15 [] = {
  // step of 1 that ADSR is changing. In total it's 256 steps (from 0 to max volume) to reach time to match Envelope timing in real SID.


  /* // from reSID
        9,  //   2ms*1.0MHz/256 =     7.81
       32,  //   8ms*1.0MHz/256 =    31.25
       63,  //  16ms*1.0MHz/256 =    62.50
       95,  //  24ms*1.0MHz/256 =    93.75
      149,  //  38ms*1.0MHz/256 =   148.44
      220,  //  56ms*1.0MHz/256 =   218.75
      267,  //  68ms*1.0MHz/256 =   265.63
      313,  //  80ms*1.0MHz/256 =   312.50
      392,  // 100ms*1.0MHz/256 =   390.63
      977,  // 250ms*1.0MHz/256 =   976.56
     1954,  // 500ms*1.0MHz/256 =  1953.13
     3126,  // 800ms*1.0MHz/256 =  3125.00
     3907,  //   1 s*1.0MHz/256 =  3906.25
    11720,  //   3 s*1.0MHz/256 = 11718.75
    19532,  //   5 s*1.0MHz/256 = 19531.25
    31251   //   8 s*1.0MHz/256 = 31250.00
  */
  // from reSID, but lowered by 1
  8,  //   2ms*1.0MHz/256 =     7.81
  31,  //   8ms*1.0MHz/256 =    31.25
  62,  //  16ms*1.0MHz/256 =    62.50
  94,  //  24ms*1.0MHz/256 =    93.75
  148,  //  38ms*1.0MHz/256 =   148.44
  219,  //  56ms*1.0MHz/256 =   218.75
  266,  //  68ms*1.0MHz/256 =   265.63
  312,  //  80ms*1.0MHz/256 =   312.50
  391,  // 100ms*1.0MHz/256 =   390.63
  976,  // 250ms*1.0MHz/256 =   976.56
  1953,  // 500ms*1.0MHz/256 =  1953.13
  3125,  // 800ms*1.0MHz/256 =  3125.00
  3906,  //   1 s*1.0MHz/256 =  3906.25
  11719,  //   3 s*1.0MHz/256 = 11718.75
  19531,  //   5 s*1.0MHz/256 = 19531.25
  31250   //   8 s*1.0MHz/256 = 31250.00

};
// value is 1 per 1uS// / 256 is becasue there are 256 values of ADSR volume
// 2ms,8ms,16ms,24ms,38ms,56ms,68ms,80ms,100ms,250ms,500ms,800ms,1s,3s,5,8s for attack
// 6ms,24ms,48ms,72ms,114ms,168ms,68ms,240ms,300ms,750ms,1500ms,2400ms,3s,9s,15,24s for decay/release



//ADSR 1

uint32_t ADSR_volume_1 = 0; // 8bit ADSR volume, but must use uint32_t because it will  // 256 different values of volume
uint32_t LFSR15_1 = 0x7fff; // 15bit ADSR LSFR //
uint32_t LFSR15_comparator_value_1 = 0; // 15bit comparator for LFSR15
uint16_t Divided_LFSR15_1 = 0; // whole number helper variable
uint16_t Divided_LFSR5_1 = 0; // whole number helper variable
uint32_t LFSR5_1 = 0; //  counter that is dividing  LFSR15 counter to ADSR_Volume counter. It is taken from predefined ADSR_Volume values (Catch22)
uint32_t LFSR5_comparator_value_1 = 1; // value that... uff... compare
uint8_t ADSR_Attack_1 = 0; // Attack value (0-15)
uint8_t ADSR_Decay_1 = 0; // Decay value (0-15)
uint8_t ADSR_Sustain_1 = 0; // Sustain value (0-15)
uint8_t ADSR_Release_1 = 0; // Release value (0-15)
uint8_t ADSR_stage_1;  // 0-release finished , 1-Attack, 2-Decay, 3-Sustain, 4-Release
bool hold_zero_1 = false;

//ADSR 2

int16_t ADSR_volume_2 = 0; // 8bit ADSR volume // 256 different values of volume
uint32_t LFSR15_2 = 0x7fff; // 15bit ADSR LSFR, but can be used as counter in  coding //
uint32_t LFSR15_comparator_value_2 = 0; // 15bit comparator for LFSR15
uint16_t Divided_LFSR15_2 = 0;
uint16_t Divided_LFSR5_2 = 0;
uint32_t LFSR5_2 = 0; //  counter that is dividing  LFSR15 counter to ADSR_Volume counter. It is dirived from predefined ADSR_Volume values (Catch22)
uint32_t LFSR5_comparator_value_2 = 1; // value that
uint8_t ADSR_Attack_2 = 0; // Attack value (0-15)
uint8_t ADSR_Decay_2 = 0; // Decay value (0-15)
uint8_t ADSR_Sustain_2 = 0; // Sustain value (0-15)
uint8_t ADSR_Release_2 = 0; // Release value (0-15)
uint8_t ADSR_stage_2;  // 0-release finished , 1-Attack, 2-Decay, 3-Sustain, 4-Release
bool hold_zero_2 = false;
//ADSR 3

int16_t ADSR_volume_3 = 0; // 8bit ADSR volume // 256 different values of volume
uint32_t LFSR15_3 = 0x7fff; // 15bit ADSR LSFR, but can be used as counter in  coding //
uint32_t LFSR15_comparator_value_3 = 0; // 15bit comparator for LFSR15
uint16_t Divided_LFSR15_3 = 0;
uint16_t Divided_LFSR5_3 = 0;
uint32_t LFSR5_3 = 0; //  counter that is dividing  LFSR15 counter to ADSR_Volume counter. It is dirived from predefined ADSR_Volume values (Catch22)
uint32_t LFSR5_comparator_value_3 = 1; // value that
uint8_t ADSR_Attack_3 = 0; // Attack value (0-15)
uint8_t ADSR_Decay_3 = 0; // Decay value (0-15)
uint8_t ADSR_Sustain_3 = 0; // Sustain value (0-15)
uint8_t ADSR_Release_3 = 0; // Release value (0-15)
uint8_t ADSR_stage_3;  // 0-release finished , 1-Attack, 2-Decay, 3-Sustain, 4-Release
bool hold_zero_3 = false;

// gate bit

uint8_t Gate_bit_1 = 1; //
uint8_t Gate_bit_2 = 1;
uint8_t Gate_bit_3 = 1;
/*
   Gate_bit_X variable:
   0 - change from 1 to 0 * start Release stage
   1 - change from 0 to 1 * start Attack stage )

*/

uint8_t Gate_previous_1 = 0; // need to know what was previous gate bit
uint8_t Gate_previous_2 = 0; // need to know what was previous gate bit
uint8_t Gate_previous_3 = 0; // need to know what was previous gate bit


uint8_t waveform_switch_1 = 0; // 0-15, depending of waveform
uint8_t waveform_switch_2 = 0; // 0-15, depending of waveform
uint8_t waveform_switch_3 = 0; // 0-15, depending of waveform
//

uint16_t WaveformDA_1 = 0; // 12bit Waveform DA
uint16_t WaveformDA_noise_1 = 0;
uint16_t WaveformDA_triangle_1 = 0;
uint16_t WaveformDA_sawtooth_1 = 0;
uint16_t WaveformDA_pulse_1 = 0;
uint32_t pseudorandom_1 =  0x7ffff8; //  for rnd
uint32_t bit22_1 = 0;//
uint32_t bit17_1 = 0;
uint8_t bit_0_1 = 0;

uint16_t WaveformDA_2 = 0; // 12bit Waveform DA
uint16_t WaveformDA_noise_2 = 0;
uint16_t WaveformDA_triangle_2 = 0;
uint16_t WaveformDA_sawtooth_2 = 0;
uint16_t WaveformDA_pulse_2 = 0;
uint32_t pseudorandom_2 =  0x7ffff8; //  for rnd
uint32_t bit22_2 = 0;//
uint32_t bit17_2 = 0;
uint8_t bit_0_2 = 0;

uint16_t WaveformDA_3 = 0; // 12bit Waveform DA
uint16_t WaveformDA_noise_3 = 0;
uint16_t WaveformDA_triangle_3 = 0;
uint16_t WaveformDA_sawtooth_3 = 0;
uint16_t WaveformDA_pulse_3 = 0;
uint32_t pseudorandom_3 =  0x7ffff8; //  for rnd
uint32_t bit22_3 = 0;//
uint32_t bit17_3 = 0;
uint8_t bit_0_3 = 0;

// initial setup for SID registers - can be used for testing or for sketch with only interrupt (with just SID emulator, and direct change registers)
uint16_t sawtooth_bit_voice_1 = 0;
uint16_t triangle_bit_voice_1 = 0;
uint16_t pulse_bit_voice_1 = 0;
uint16_t noise_bit_voice_1 = 0;
uint16_t PW_HiLo_voice_1 = 2048;  // 2048 = 50% initial test

uint16_t sawtooth_bit_voice_2 = 0;
uint16_t triangle_bit_voice_2 = 0;
uint16_t pulse_bit_voice_2 = 0;
uint16_t noise_bit_voice_2 = 0;
uint16_t PW_HiLo_voice_2 = 2048;  // 2048 = 50% initial test

uint16_t sawtooth_bit_voice_3 = 0;
uint16_t triangle_bit_voice_3 = 0;
uint16_t pulse_bit_voice_3 = 0;
uint16_t noise_bit_voice_3 = 0;
uint16_t PW_HiLo_voice_3 = 2048;  // 2048 = 50% initial test


// ADSR volume (8bit) to LFSR5_comparator table
//

const uint8_t ADSR_Volume2LFSR5 [] = { // clock divider that drive ADSR_Volume counter, and is readed from ADSR_Volume value

  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1e, 0x1e,
  0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x10, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
  0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01

};






#endif

/*
  //  ---------------------------------------------------------------------------
  //  This file is part of reSID, a MOS6581 SID emulator engine.
  //  Copyright (C) 2004  Dag Lem <resid@nimrod.no>
  //
  //  This program is free software; you can redistribute it and/or modify
  //  it under the terms of the GNU General Public License as published by
  //  the Free Software Foundation; either version 2 of the License, or
  //  (at your option) any later version.
  //
  //  This program is distributed in the hope that it will be useful,
  //  but WITHOUT ANY WARRANTY; without even the implied warranty of
  //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  //  GNU General Public License for more details.
  //
  //  You should have received a copy of the GNU General Public License
  //  along with this program; if not, write to the Free Software
  //  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  //  ---------------------------------------------------------------------------


  reg8 WaveformGenerator::wave8580_PS_[] =
*/

// mask for combining waveforms
// from reSID, i couldn't find a pattern to calculate
// 8bit resolution (Upper 8 bits of Waveform generator, need to be <<4 shifted)
#ifndef _andmask
#define _andmask
const uint8_t AND_mask [] {
  /* 0x000: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x008: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x010: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x018: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x020: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x028: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x030: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x038: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x040: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x048: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x050: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x058: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x060: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x068: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x070: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x078: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x080: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x088: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x090: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x098: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x0c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0f8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  /* 0x100: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x108: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x110: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x118: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x120: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x128: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x130: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x138: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x140: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x148: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x150: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x158: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x160: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x168: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x170: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x178: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  /* 0x180: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x188: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x190: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x198: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x1c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x1e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x1f8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x1f,
  /* 0x200: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x208: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x210: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x218: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x220: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x228: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x230: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x238: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x240: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x248: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x250: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x258: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x260: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x268: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x270: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x278: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x280: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x288: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x290: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x298: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x2c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x2e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x2f8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f,
  /* 0x300: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x308: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x310: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x318: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x320: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x328: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x330: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x338: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x340: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x348: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x350: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x358: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x360: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x368: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x370: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x378: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
  /* 0x380: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x388: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x390: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x398: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b,
  /* 0x3c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d,
  /* 0x3e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x3e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e,
  /* 0x3f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
  /* 0x3f8: */  0x00, 0x0c, 0x1c, 0x3f, 0x1e, 0x3f, 0x3f, 0x3f,
  /* 0x400: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x408: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x410: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x418: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x420: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x428: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x430: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x438: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x440: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x448: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x450: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x458: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x460: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x468: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x470: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x478: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x480: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x488: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x490: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x498: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x4c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x4f8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
  /* 0x500: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x508: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x510: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x518: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x520: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x528: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x530: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x538: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x540: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x548: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x550: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x558: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x560: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x568: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x570: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x578: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
  /* 0x580: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x588: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x590: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x598: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b,
  /* 0x5c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
  /* 0x5e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x5e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e,
  /* 0x5f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f,
  /* 0x5f8: */  0x00, 0x00, 0x00, 0x5f, 0x0c, 0x5f, 0x5f, 0x5f,
  /* 0x600: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x608: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x610: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x618: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x620: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x628: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x630: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x638: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x640: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x648: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x650: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x658: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x660: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x668: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x670: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x678: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47,
  /* 0x680: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x688: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x690: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x698: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43,
  /* 0x6c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
  /* 0x6e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x6e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e,
  /* 0x6f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f,
  /* 0x6f8: */  0x00, 0x40, 0x40, 0x6f, 0x40, 0x6f, 0x6f, 0x6f,
  /* 0x700: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x708: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x710: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x718: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x720: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x728: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x730: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x738: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,
  /* 0x740: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x748: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x750: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x758: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x61,
  /* 0x760: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  /* 0x768: */  0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x40, 0x70,
  /* 0x770: */  0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70,
  /* 0x778: */  0x40, 0x60, 0x60, 0x77, 0x60, 0x77, 0x77, 0x77,
  /* 0x780: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x788: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  /* 0x790: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60,
  /* 0x798: */  0x00, 0x40, 0x40, 0x60, 0x40, 0x60, 0x60, 0x79,
  /* 0x7a0: */  0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60,
  /* 0x7a8: */  0x40, 0x40, 0x40, 0x60, 0x60, 0x60, 0x60, 0x78,
  /* 0x7b0: */  0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78,
  /* 0x7b8: */  0x60, 0x70, 0x70, 0x78, 0x70, 0x79, 0x7b, 0x7b,
  /* 0x7c0: */  0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70,
  /* 0x7c8: */  0x60, 0x60, 0x60, 0x70, 0x60, 0x70, 0x70, 0x7c,
  /* 0x7d0: */  0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x7c,
  /* 0x7d8: */  0x70, 0x78, 0x78, 0x7c, 0x78, 0x7c, 0x7c, 0x7d,
  /* 0x7e0: */  0x70, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7c,
  /* 0x7e8: */  0x78, 0x7c, 0x7c, 0x7e, 0x7c, 0x7e, 0x7e, 0x7e,
  /* 0x7f0: */  0x7c, 0x7c, 0x7c, 0x7e, 0x7e, 0x7f, 0x7f, 0x7f,
  /* 0x7f8: */  0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff,
  /* 0x800: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x808: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x810: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x818: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x820: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x828: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x830: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x838: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x840: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x848: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x850: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x858: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x860: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x868: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x870: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x878: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  /* 0x880: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x888: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x890: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x898: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x8c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8e8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8f0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x8f8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f,
  /* 0x900: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x908: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x910: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x918: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x920: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x928: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x930: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x938: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0x940: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x948: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x950: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x958: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x960: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x968: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x970: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x978: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
  /* 0x980: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x988: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x990: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x998: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9a0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9a8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9b0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9b8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83,
  /* 0x9c0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9c8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9d0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x9d8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x8d,
  /* 0x9e0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0x9e8: */  0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x8e,
  /* 0x9f0: */  0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x8f,
  /* 0x9f8: */  0x80, 0x80, 0x80, 0x9f, 0x80, 0x9f, 0x9f, 0x9f,
  /* 0xa00: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa08: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa10: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa18: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa20: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa28: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa30: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa38: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  /* 0xa40: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa48: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa50: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa58: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa60: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa68: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xa70: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xa78: */  0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x87,
  /* 0xa80: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa88: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa90: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xa98: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xaa0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xaa8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xab0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xab8: */  0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x83,
  /* 0xac0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xac8: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xad0: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
  /* 0xad8: */  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81,
  /* 0xae0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xae8: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x84,
  /* 0xaf0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x87,
  /* 0xaf8: */  0x80, 0x80, 0x80, 0x87, 0x80, 0x8f, 0xaf, 0xaf,
  /* 0xb00: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0xb08: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xb10: */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  /* 0xb18: */  0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb20: */  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80,
  /* 0xb28: */  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb30: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb38: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83,
  /* 0xb40: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb48: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb50: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb58: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81,
  /* 0xb60: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb68: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0,
  /* 0xb70: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0,
  /* 0xb78: */  0x80, 0x80, 0x80, 0xa0, 0x80, 0xa3, 0xb7, 0xb7,
  /* 0xb80: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb88: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb90: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xb98: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xb1,
  /* 0xba0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xba8: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xb0,
  /* 0xbb0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xb0,
  /* 0xbb8: */  0x80, 0xa0, 0xa0, 0xb0, 0xa0, 0xb8, 0xb9, 0xbb,
  /* 0xbc0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0,
  /* 0xbc8: */  0x80, 0x80, 0x80, 0xa0, 0x80, 0xa0, 0xa0, 0xb8,
  /* 0xbd0: */  0x80, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xb8,
  /* 0xbd8: */  0xa0, 0xb0, 0xb0, 0xb8, 0xb0, 0xbc, 0xbc, 0xbd,
  /* 0xbe0: */  0xa0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb8, 0xb8, 0xbc,
  /* 0xbe8: */  0xb0, 0xb8, 0xb8, 0xbc, 0xb8, 0xbc, 0xbe, 0xbe,
  /* 0xbf0: */  0xb8, 0xbc, 0xbc, 0xbe, 0xbc, 0xbe, 0xbe, 0xbf,
  /* 0xbf8: */  0xbe, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
  /* 0xc00: */  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80,
  /* 0xc08: */  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80,
  /* 0xc10: */  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc18: */  0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc20: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc28: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc30: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc38: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81,
  /* 0xc40: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc48: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc50: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc58: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc60: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc68: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc70: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc78: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc7,
  /* 0xc80: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc88: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc90: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xc98: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xca0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xca8: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xcb0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xcb8: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc3,
  /* 0xcc0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xcc8: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xcd0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xcd8: */  0x80, 0x80, 0x80, 0xc0, 0x80, 0xc0, 0xc0, 0xc1,
  /* 0xce0: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xce8: */  0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xcf0: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7,
  /* 0xcf8: */  0xc0, 0xc0, 0xc0, 0xc7, 0xc0, 0xcf, 0xcf, 0xcf,
  /* 0xd00: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xd08: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xd10: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xd18: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xd20: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  /* 0xd28: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xd30: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0,
  /* 0xd38: */  0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3,
  /* 0xd40: */  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0,
  /* 0xd48: */  0x80, 0x80, 0x80, 0xc0, 0x80, 0xc0, 0xc0, 0xc0,
  /* 0xd50: */  0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd58: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
  /* 0xd60: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd68: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd70: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd78: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1, 0xc7, 0xd7,
  /* 0xd80: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd88: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd90: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xd98: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xda0: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xda8: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xd0,
  /* 0xdb0: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xd0,
  /* 0xdb8: */  0xc0, 0xc0, 0xc0, 0xd0, 0xc0, 0xd0, 0xd8, 0xdb,
  /* 0xdc0: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xdc8: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xd8,
  /* 0xdd0: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xd8,
  /* 0xdd8: */  0xc0, 0xc0, 0xc0, 0xd8, 0xd0, 0xd8, 0xd8, 0xdd,
  /* 0xde0: */  0xc0, 0xc0, 0xc0, 0xd0, 0xc0, 0xd0, 0xd0, 0xdc,
  /* 0xde8: */  0xd0, 0xd8, 0xd8, 0xdc, 0xd8, 0xdc, 0xdc, 0xde,
  /* 0xdf0: */  0xd8, 0xdc, 0xdc, 0xde, 0xdc, 0xde, 0xde, 0xdf,
  /* 0xdf8: */  0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf,
  /* 0xe00: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe08: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe10: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe18: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe20: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe28: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe30: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe38: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe3,
  /* 0xe40: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe48: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  /* 0xe50: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0,
  /* 0xe58: */  0xc0, 0xc0, 0xc0, 0xe0, 0xc0, 0xe0, 0xe0, 0xe1,
  /* 0xe60: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0,
  /* 0xe68: */  0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xe70: */  0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xe78: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe1, 0xe3, 0xe7,
  /* 0xe80: */  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0,
  /* 0xe88: */  0xc0, 0xc0, 0xc0, 0xe0, 0xc0, 0xe0, 0xe0, 0xe0,
  /* 0xe90: */  0xc0, 0xc0, 0xc0, 0xe0, 0xc0, 0xe0, 0xe0, 0xe0,
  /* 0xe98: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xea0: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xea8: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xeb0: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xeb8: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xeb,
  /* 0xec0: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xec8: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xed0: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xed8: */  0xe0, 0xe0, 0xe0, 0xe8, 0xe0, 0xe8, 0xe8, 0xed,
  /* 0xee0: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xec,
  /* 0xee8: */  0xe0, 0xe0, 0xe0, 0xec, 0xe8, 0xec, 0xec, 0xee,
  /* 0xef0: */  0xe8, 0xe8, 0xe8, 0xec, 0xec, 0xee, 0xee, 0xef,
  /* 0xef8: */  0xec, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef,
  /* 0xf00: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xf08: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xf10: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
  /* 0xf18: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0,
  /* 0xf20: */  0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0,
  /* 0xf28: */  0xe0, 0xe0, 0xe0, 0xf0, 0xe0, 0xf0, 0xf0, 0xf0,
  /* 0xf30: */  0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  /* 0xf38: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf3,
  /* 0xf40: */  0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  /* 0xf48: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  /* 0xf50: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  /* 0xf58: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf5,
  /* 0xf60: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  /* 0xf68: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf4, 0xf4, 0xf6,
  /* 0xf70: */  0xf0, 0xf0, 0xf0, 0xf4, 0xf0, 0xf4, 0xf6, 0xf7,
  /* 0xf78: */  0xf4, 0xf6, 0xf6, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7,
  /* 0xf80: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8,
  /* 0xf88: */  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8,
  /* 0xf90: */  0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0xf8, 0xf8, 0xf8,
  /* 0xf98: */  0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf9,
  /* 0xfa0: */  0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
  /* 0xfa8: */  0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfa,
  /* 0xfb0: */  0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfb,
  /* 0xfb8: */  0xf8, 0xfa, 0xfa, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb,
  /* 0xfc0: */  0xf8, 0xf8, 0xf8, 0xfc, 0xf8, 0xfc, 0xfc, 0xfc,
  /* 0xfc8: */  0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
  /* 0xfd0: */  0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfd,
  /* 0xfd8: */  0xfc, 0xfc, 0xfc, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd,
  /* 0xfe0: */  0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
  /* 0xfe8: */  0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
  /* 0xff0: */  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  /* 0xff8: */  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

#endif
